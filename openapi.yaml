openapi: 3.1.0
servers:
  - url: http://localhost:42069
info:
  title: Fresh-Szop API
  version: 1.0.0
  description: |
    E-commerce platform selling fresh produce and other shelf-stable food items.

    Please don't download OpenAPI specs from button above - it uses custom 
    functionalities and won't work with codegens.
  x-logo:
    url: ./logo_nobg.png
    altText: Fresh-Szop logo
  x-meta:
    image: ./logo.png
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html

paths:
  /auth/google:
    get:
      summary: Request Google Authentication
      description: |
        This endpoint provides URL that allows to perform Google Auth Flow.

        It is important, that this URL must must launched as a website - fetching
        it from http client (like `fetch`) will always fail, because redirects
        will be CORS-blocked. Response will also not make sense, as redirected
        endpoint produces html website with auth form.
      tags: 
        - Authentication
      responses:
        "200":
          x-summary: Generate auth entry
          description: |
            Returns time-limited URL that can be used to begin Google Auth Flow.
          headers:
            Set-Cookie:
              description: |
                Sets httpOnly cookie - containing `magicToken` that identifies auth session.
                This token is used to store both Google Auth URL, as well as `state` checksum
                variable.
              schema:
                type: string
                example: "magicToken=2137-69-be-ef-420; HttpOnly"
          content:
            application/json:
              schema:
                type: object
                properties:
                  authLink:
                    type: string
                    format: uri
                    description: Google Auth Flow URL, cannot be fetched.
                  expires:
                    type: integer
                    format: UTC/ms
                    description: |
                      Timestamp of expiration date - `Date.now() + time.ms.minutes(10)`.
                      Currently not integrated.
              example:
                authLink: http://localhost:42069/auth/google/2137-69-be-ef-420
                expires: 1731213742069
  /auth/google/{magicToken}:
    get:
      summary: Begin Google Authentication
      description: |
        This endpoint will redirect to Google API auth form.

        It should be launched in html context, preferably as popup window.
        It **will** redirect several times.
      tags: 
        - Authentication
      parameters:
        - in: path
          name: magicToken
          required: true
          schema:
            type: string
            format: uuid
            example: 2137-69-be-ef-420
          description: Full URL containing this parameter is returned from `/auth/google`.
      responses:
        "301":
          description: |
            Redirects to URL generated by Google Auth.
          content:
            Headers:
              example:
                Location: https://accounts.google.com/o/oauth2/v2/auth?‚Ä¶
  /auth/google/finalize:
    get:
      summary: Finalize Google authentication
      tags:
        - Authentication
      parameters:
        - in: query
          name: state
          required: true
          schema:
            type: string
            format: uuid
          description: |
            Parameter used for context to prevent XSS attacks, 
            received from google auth flow.
        - in: query
          name: code
          required: true
          schema:
            type: string
          description: |
            Token which allows server to authenticate google api,
            received from google auth flow.
        - in: cookie
          name: magicToken
          required: true
          schema:
            type: string
            format: uuid
            example: 2137-69-be-ef-420
          description: |
            Cookie token that identifies auth flow session, received from `/auth/google`.
      responses:
        "200":
          x-summary: User authenticated
          description: |
            Finished auth handshake with google, updated or created
            user.

            Returns user info (also available on /users) and jwt credential cookies.

            **Keep in mind**, that refreshing credentials is not necessary - middleware
            of any endpoint will renew them and swap jwt cookies, if `bearer` token
            is expired, but refresh tokens is still not.
          headers:
            Set-Cookie:
              description: |
                Sets two httpOnly cookies - containing JWT credentials;
                current and refresh tokens. 
              schema:
                type: string
                example: "bearer=to.ke.n; HttpOnly, refresh=to.ke.n; HttpOnly"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                $ref: "#/components/examples/User"
        "400":
          x-summary: Bad request
          description: |
            Required parameters are missing, or in wrong data type/format.

            Returns error message.
          content:
            text/plain:
              schema:
                type: string
        "401":
          x-summary: Nonexistent `magicToken` or mismatched `state`
          description: |
            Received `magicToken` is not bound to any auth flow session, or `state` does
            not match state send to google api.

            Returns error message.
          content:
            text/plain:
              schema:
                type: string
        "502":
          x-summary: Error communicating with Google API.
          description: |
            Google API could not retrieve information about authenticated user.
          content:
            text/plain:
              schema:
                type: string
  /users:
    get:
      summary: üîê Get User Data
      description: |
        Returns data of currently authenticated user.

        This endpoint provides basic data that can be used for populating header.
        It is exactly same data as returned by `/auth/google/finalize`.
      tags:
        - User
      security:
        - jwtBearerCookie: [user]
          jwtRefreshCookie: [user]
      responses:
        "200":
          x-summary: User retrieved
          description: |
            Returns user data by id encoded in JWT Credentials.

            In theory, this call cannot fail because of user being not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                $ref: "#/components/examples/User"
        "401":
          $ref: "#/components/responses/401"
        "422":
          $ref: "#/components/responses/422"
      x-codeSamples:
        - lang: JavaScript
          label: JS
          source:
            $ref: ./samples/users.js

components:
  schemas: 
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          format: email
          description: User email
        name:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        picture:
          type: string
          format: uri
          description: URL to profile picture
  examples:
    User:
      id: 420692137
      email: john.doe@gmail.com
      name: John
      lastName: Doe
      picture: https://lh3.googleusercontent.com/‚Ä¶
  securitySchemes:
    jwtBearerCookie:
      name: bearer
      description: |
        JWT token stored in Cookie `bearer=`.
        Life expectancy of this token is 1h.

        This token will be renewed automatically using Cookie token `refresh=`.

        For details see `/auth/google/finalize`.
      type: jwt
      in: cookie
    jwtRefreshCookie:
      name: refresh
      description:
        JWT token stored in Cookie `refresh=`.
        Life expectancy of this token is 7d 1h.

        This token will be replaced automatically if refreshing is necessary.
        Using same refresh token again will not be possible.

        For details see `/auth/google/finalize`.
      type: jwt
      in: cookie
  responses:
    "401":
      x-summary: Expired or missing credentials
      description: |
        Credentials might be expired, or missing from Cookies (which also can happen,
        if expired Cookie is removed by browser).

        This error can also be produced while trying to check user status in Google API,
        due to communication error, Google Auth token being expired, or user deleting their
        account.
      content:
        text/plain:
          schema:
            type: string
    "403":
      x-summary: Wrong permission level
      content:
        text/plain:
          schema:
            type: string
    "422":
      x-summary: Malformed token
      description: |
        JWT is valid and signed, but it contents deviates from expected one.

        This might indicate API version mismatch, or XSS attack.
      content:
        text/plain:
          schema:
            type: string

tags:
  - name: Authentication
    description: |
      Flow that allows to authenticate user using google auth.

      Please don't use this api directly and instead use:
      ```js
      import login from "@/utils/login"

      const user = await login()
      ```
  - name: User
    description: |
      API that allows to retrieve, modify and delete information related to users.
