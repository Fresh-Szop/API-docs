openapi: 3.1.0
servers:
    - url: http://localhost:42069
info:
    title: Fresh-Szop API
    version: 1.0.0
    description: |
        E-commerce platform selling fresh produce and other shelf-stable food items.

        Please don't download OpenAPI specs from button above - it uses custom 
        functionalities and won't work with codegens.
    x-logo:
        url: ./logo_api.jpeg
        altText: Fresh-Szop logo
    x-meta:
        image: ./logo.png
    license:
        name: GNU General Public License v3.0
        url: https://www.gnu.org/licenses/gpl-3.0.html

paths:
    /auth/google:
        get:
            summary: Request Google Authentication
            description: |
                This endpoint provides URL that allows to perform Google Auth Flow.

                It is important, that this URL must must launched as a website - fetching
                it from http client (like `fetch`) will always fail, because redirects
                will be CORS-blocked. Response will also not make sense, as redirected
                endpoint produces html website with auth form.
            tags: 
                - Authentication
            responses:
                "200":
                    x-summary: Generate auth entry
                    description: |
                        Returns time-limited URL that can be used to begin Google Auth Flow.
                    headers:
                        Set-Cookie:
                            description: |
                                Sets httpOnly cookie - containing `magicToken` that identifies auth session.
                                This token is used to store both Google Auth URL, as well as `state` checksum
                                variable.
                            schema:
                                type: string
                                example: "magicToken=2137-69-be-ef-420; HttpOnly"
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    authLink:
                                        type: string
                                        format: uri
                                        description: Google Auth Flow URL, cannot be fetched.
                                    expires:
                                        type: integer
                                        format: UTC/ms
                                        description: |
                                            Timestamp of expiration date - `Date.now() + time.ms.minutes(10)`.

                                            Currently not integrated.
                            example:
                                authLink: http://localhost:42069/auth/google/2137-69-be-ef-420
                                expires: 1731213742069
    /auth/google/{magicToken}:
        get:
            summary: Begin Google Authentication
            description: |
                This endpoint will redirect to Google API auth form.

                It should be launched in html context, preferably as popup window.
                It **will** redirect several times.
            tags: 
                - Authentication
            parameters:
                - in: path
                  name: magicToken
                  required: true
                  schema:
                    type: string
                    format: uuid
                    example: 2137-69-be-ef-420
                  description: Full URL containing this parameter is returned from `/auth/google`.
            responses:
                "301":
                    description: |
                        Redirects to URL generated by Google Auth.
                    content:
                        Headers:
                            example:
                                Location: https://accounts.google.com/o/oauth2/v2/auth?…
    /auth/google/finalize:
        get:
            summary: Finalize Google authentication
            tags:
                - Authentication
            parameters:
                - in: query
                  name: state
                  required: true
                  schema:
                    type: string
                    format: uuid
                  description: |
                    Parameter used for context to prevent XSS attacks, 
                    received from google auth flow.
                - in: query
                  name: code
                  required: true
                  schema:
                    type: string
                  description: |
                    Token which allows server to authenticate google api,
                    received from google auth flow.
                - in: cookie
                  name: magicToken
                  required: true
                  schema:
                    type: string
                    format: uuid
                    example: 2137-69-be-ef-420
                  description: |
                    Cookie token that identifies auth flow session, received from `/auth/google`.
            responses:
                "200":
                    x-summary: User authenticated
                    description: |
                        Finished auth handshake with google, updated or created
                        user.

                        Returns user info (also available on /users) and jwt credential cookies.

                        **Keep in mind**, that refreshing credentials is not necessary - middleware
                        of any endpoint will renew them and swap jwt cookies, if `bearer` token
                        is expired, but refresh tokens is still not.
                    headers:
                        Set-Cookie:
                            description: |
                                Sets two httpOnly cookies - containing JWT credentials;
                                current and refresh tokens. 
                            schema:
                                type: string
                                example: "bearer=to.ke.n; HttpOnly, refresh=to.ke.n; HttpOnly"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                            example:
                                $ref: "#/components/examples/User"
                "400":
                    x-summary: Bad request
                    description: |
                        Required parameters are missing, or in wrong data type/format.

                        Returns error message.
                    content:
                        text/plain:
                            schema:
                                type: string
                "401":
                    x-summary: Nonexistent `magicToken` or mismatched `state`
                    description: |
                        Received `magicToken` is not bound to any auth flow session, or `state` does
                        not match state send to google api.

                        Returns error message.
                    content:
                        text/plain:
                            schema:
                                type: string
                "502":
                    x-summary: Error communicating with Google API.
                    description: |
                        Google API could not retrieve information about authenticated user.
                    content:
                        text/plain:
                            schema:
                                type: string
    /users:
        get:
            summary: 🔐 Get User Data
            description: |
                Returns data of currently authenticated user.

                This endpoint provides basic data that can be used for populating header.
                It is exactly same data as returned by `/auth/google/finalize`.
            tags:
                - User
            security:
                - jwtBearerCookie: [user]
                  jwtRefreshCookie: [user]
            responses:
                "200":
                    x-summary: User retrieved
                    description: |
                        Returns user data by id encoded in JWT Credentials.

                        In theory, this call cannot fail because of user being not found.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                            example:
                                $ref: "#/components/examples/User"
                "401":
                    $ref: "#/components/responses/401"
                "422":
                    $ref: "#/components/responses/422"
            # x-codeSamples:
            #     - lang: JavaScript
            #       label: JS
            #       source:
            #         $ref: ./samples/users-get.js
    /products:
        get:
            summary: List Products
            description: |
                Returns list of products (and their data) in paginated form.

                Allows filtering and sorting through query params,
                as well as changing page size and forcing different month using X-* headers.
            tags:
                - Product
            parameters:
                - in: header
                  name: X-Page-Size
                  required: false
                  schema:
                    type: integer
                    minimum: 5
                    maximum: 90
                  description: |
                    Parameter that allows changing default page size
                    (changing it on page > 1 will return first page in new pagination scheme).

                    Defaults to 10.
                - in: header
                  name: X-TimeTravel-Month
                  schema:
                    type: integer
                    minimum: 1
                    maximum: 12
                  description: |
                    Parameter that allows changing month that prices (or sometimes availability)
                    are retrieved for.
                    
                    Defaults to current month of server date.
                - in: query
                  name: order
                  schema:
                    type: string
                    enum:
                        - availability-asc
                        - availability-desc
                        - name-asc
                        - name-desc
                        - price-asc
                        - price-desc
                  required: false
                  description: |
                    Parameters that controls order in which products are returned.

                    Defaults to `name-asc`.
                - in: query
                  name: isSeason
                  schema:
                    type: boolean
                  required: false
                  description: |
                    Filters on seasonal products.

                    If missing, does not filter on category.
                - in: query
                  name: category
                  schema:
                    type: string
                    enum:
                        - vegetable
                        - fruit
                        - ingredients
                  required: false
                  description: |
                    Filters on category of products.

                    If missing, does not filter on category.
                - in: query
                  name: discount
                  schema:
                    type: boolean
                  required: false
                  description: |
                    Filters on whether product is discounted, or not.

                    If missing, does not filter on category.
                - in: query
                  name: price-min
                  schema:
                    type: number
                    minimum: 0.01
                    maximum: "price-max - 0.01"
                  required: false
                  description: |
                    Filters on minimum price (after discount).

                    There must exist relationship between `price-min <= price-max`,
                    if both are present.
                - in: query
                  name: price-max
                  schema:
                    type: number
                    minimum: "price-min + 0.01"
                  required: false
                  description: |
                    Filters on maximum price (after discount).

                    There must exist relationship between `price-min <= price-max`,
                    if both are present.
                - in: query
                  name: page
                  schema:
                    type: number
                    minimum: 1
                    maximum: "response.body.pages.lastPage"
            responses:
                "200":
                    x-summary: Products retrieved
                    description: |
                        Returns list of products that correspond to specified filters,
                        and "cursor" representation.

                        List of products will not contain more than `request.headers.X-Page-Size`,
                        but can contain less on last page (that also can be first if there are few
                        resulting products).
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ProductList"
                            example:
                                $ref: "#/components/examples/ProductList"
                "400":
                    x-summary: Bad request
                    description: |
                        Required parameters are missing, or in wrong data type/format.

                        Returns error message.
                    content:
                        text/plain:
                            schema:
                                type: string
                "422":
                    x-summary: Invalid parameter values
                    description: |
                        Required parameters are present and contain valid data, but
                        assertions are failed, for example when:
                            
                        - `query.price-min` > `query.price-max`,
                        - `query.page` > `response.body.pages.lastPage`.
                        
                        Returns error message.
                    content:
                        text/plain:
                            schema:
                                type: string
            # x-codeSamples:
            #     - lang: JavaScript
            #       label: JS
            #       source:
            #         $ref: ./samples/products-get.js
    /products/{productId}:
        get:
            summary: Get Product Data
            description: |
                Returns full data of given product.
            tags:
                - Product
            parameters:
                - in: header
                  name: X-TimeTravel-Month
                  schema:
                    type: integer
                    minimum: 1
                    maximum: 12
                  description: |
                    Parameter that allows changing month that prices (or sometimes availability)
                    are retrieved for.
                    
                    Defaults to current month of server date.
                - in: path
                  name: productId
                  schema:
                    type: number
                  required: true
                  description: |
                    Identifier of product.

                    Must be id of existing product.
            responses:
                "200":
                    x-summary: Product retrieved
                    description: |
                        Returns full data of product.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Product"
                            example:
                                $ref: "#/components/examples/Product"
                "400":
                    x-summary: Bad request
                    description: |
                        Required parameters are missing, or in wrong data type/format.

                        Returns error message.
                    content:
                        text/plain:
                            schema:
                                type: string
                "404":
                    x-summary: Product not found
                    description: |
                        No product was found for given id.
                    content:
                        text/plain:
                            schema:
                                type: string
            # x-codeSamples:
            #     - lang: JavaScript
            #       label: JS
            #       source:
            #         $ref: ./samples/products-get.js
components:
    schemas: 
        User:
            type: object
            properties:
                userId:
                    type: string
                    description: User ID
                email:
                    type: string
                    format: email
                    description: User email
                name:
                    type: string
                    description: User's first name
                lastName:
                    type: string
                    description: User's last name
                picture:
                    type: string
                    format: uri
                    description: URL to profile picture
        ProductList:
            type: object
            properties:
                products:
                    type: array
                    items:
                        $ref: "#/components/schemas/SimpleProduct"
                pages:
                    $ref: "#/components/schemas/PagesCursor"
        SimpleProduct:
            type: object
            properties:
                productId:
                    type: number
                    description: |
                        Product identifier.

                        Will never change.
                productName:
                    type: string
                    description: |
                        Name of product.
                basePrice:
                    type: number
                    minimum: 0.01
                    description: |
                        Base price of product, before applying discounts.
                discountedPrice:
                    type: number
                    maximum: "basePrice"
                    description: |
                        Discounted price of product.
                        
                        If present, then `discount` will be present as well.
                discount:
                    type: number
                    minimum: 0.0
                    maximum: 1.0
                    description: |
                        Discount percentage (as 0..1 float).
                        
                        If present, then `discountedPrice` will be present as well.
            required:
                - productId
                - productName
                - basePrice
                - description
        Product:
            type: object
            properties:
                productId:
                    type: number
                    description: |
                        Product identifier.

                        Will never change.
                productName:
                    type: string
                    description: |
                        Name of product.
                producer:
                    type: string
                    description: |
                        Name of product producer.
                category:
                    type: string
                    enum:
                        - vegetable
                        - fruit
                        - ingredients
                    description: |
                        Category to which product belongs.
                unit:
                    type: string
                    description: |
                        Describes unit in which product is being sold.

                        This would be either 1 item (`"szt."`) or exact weight
                        for items that have small size (like berries, which usually
                        have unit of `"125g"`` etc.).
                avgUnitWeight:
                    type: number
                    description: |
                        This is average weight of one unit of product - represented
                        as kilograms.

                        For exact units, it reflects directly same number (`"125g"`
                        has average unit weight of 0.125 [kg]). For item (`"szt."`)
                        units, this reflects statistical average weight of one item.

                        This data should not be displayed to the user, however dividing
                        price by this value can give price-per-kilogram, which probably
                        should be shown.
                typicalUnitWight:
                    type: string
                    description: |
                        This is human-readable description of expected range of weight
                        of products, that have unit of item (`"szt."`).

                        It usually is formatted as `"${min}-${max}g` or `"${min}-${max}kg`
                        and as a human-friendly representation can be shown to the client.
                availableUnits:
                    type: number
                    description: |
                        Exact number of units currently available in warehouse.
                basePrice:
                    type: number
                    minimum: 0.01
                    description: |
                        Base price of product, before applying discounts.
                discountedPrice:
                    type: number
                    maximum: "basePrice"
                    description: |
                        Discounted price of product.
                        
                        If present, then `discount` will be present as well.
                discount:
                    type: number
                    minimum: 0.0
                    maximum: 1.0
                    description: |
                        Discount percentage (as 0..1 float).
                        
                        If present, then `discountedPrice` will be present as well.
                isSeason:
                    type: boolean
                    description: |
                        Indicates whether products is currently available as seasonal
                        product.

                        Some products might be generally available and thus will
                        never be seasonally available; at the same time, most seasonal
                        products are still available all-year-round, they are just imported
                        or greenhouse-grown.
                description:
                    type: string
                    description: |
                        Simple description of product.
            required:
                - productId
                - productName
                - producer
                - category
                - unit
                - avgUnitWeight
                - availableUnits
                - basePrice
                - isSeason
                - description
        PagesCursor:
            type: object
            properties:
                firstPage:
                    type: integer
                    description: |
                        Number of first page.

                        Pages are 1-indexed.
                currentPage:
                    type: integer
                    description: |
                        Number of current page.
                lastPage:
                    type: integer
                    description: |
                        Number of last page.

                        This also represents number of pages (due to 1-indexing).
    
    examples:
        User:
            id: 420692137
            email: john.doe@gmail.com
            name: John
            lastName: Doe
            picture: https://lh3.googleusercontent.com/…
    securitySchemes:
        jwtBearerCookie:
            name: bearer
            description: |
                JWT token stored in Cookie `bearer=`.
                Life expectancy of this token is 1h.

                This token will be renewed automatically using Cookie token `refresh=`.

                For details see `/auth/google/finalize`.
            type: jwt
            in: cookie
        jwtRefreshCookie:
            name: refresh
            description:
                JWT token stored in Cookie `refresh=`.
                Life expectancy of this token is 7d 1h.

                This token will be replaced automatically if refreshing is necessary.
                Using same refresh token again will not be possible.

                For details see `/auth/google/finalize`.
            type: jwt
            in: cookie
    responses:
        "401":
            x-summary: Expired or missing credentials
            description: |
                Credentials might be expired, or missing from Cookies (which also can happen,
                if expired Cookie is removed by browser).

                This error can also be produced while trying to check user status in Google API,
                due to communication error, Google Auth token being expired, or user deleting their
                account.
            content:
                text/plain:
                    schema:
                        type: string
        "403":
            x-summary: Wrong permission level
            description: |
                Credentials specify role(s) that are not allowed to specified resources,
                or don't have ones that are required for access.
            content:
                text/plain:
                    schema:
                        type: string
        "422":
            x-summary: Malformed token
            description: |
                JWT is valid and signed, but it contents deviates from expected one.

                This might indicate API version mismatch, or XSS attack.
            content:
                text/plain:
                    schema:
                        type: string

tags:
    - name: Authentication
      description: |
        Flow that allows to authenticate user using google auth.

        Please don't use this api directly and instead use:
        ```js
        import login from "@/utils/login"

        const user = await login()
        ```
    - name: User
      description: |
        API that allows to retrieve, modify and delete information related to users.
    - name: Product
      description: |
        API that allows to retrieve products.
